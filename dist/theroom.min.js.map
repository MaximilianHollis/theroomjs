{"version":3,"sources":["theroom.js"],"names":["window","document","getInspector","options","inspector","createInspector","prepareInspectorStyles","top","left","width","height","_styles","transition","transitionSpeed","position","pointer-events","z-index","background-color","bgcolor","utils","objectToCss","eventEmitter","event","target","id","namespace","type","eventController","pos","getBoundingClientRect","scrollTop","scrollY","documentElement","Math","max","inspectorStyles","replace","setAttribute","showInfo","detailsEl","querySelector","innerText","tagName","className","split","join","engine","addEventListener","template","innerHTML","removeEventListener","query","exceptions","length","i","getSelectorQuery","allNodes","querySelectorAll","theRoom","useInline","onStart","onStarting","onStop","onStopping","onClick","obj","css","key","hasOwnProperty","createElement","style","styleEl","styleSheet","cssText","appendChild","createTextNode","getElementsByTagName","element","call","undefined","start","opts","opt","applyNewOptions","stop","remove"],"mappings":"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","file":"theroom.min.js","sourcesContent":["(function(window, document) {\r\n  // define the plugin in global variable to make it accessible from outside\r\n  window.theRoom = (function(window, document) {\r\n    // default options\r\n    var options = {\r\n      inspector: null,\r\n      namespace: \"theroom\",\r\n      bgcolor: \"rgba(255,0,0,0.5)\",\r\n      transitionSpeed: 200,\r\n      useInline: true,\r\n      showInfo: true,\r\n      template: \"\",\r\n      onStart: null,\r\n      onStarting: null,\r\n      onStop: null,\r\n      onStopping: null,\r\n      onClick: null,\r\n      exceptions: [\r\n        \"head\",\r\n        \"meta\",\r\n        \"link\",\r\n        \"style\",\r\n        \"title\",\r\n        \"script\"\r\n      ]\r\n    };\r\n\r\n    // some snippet functions\r\n    var utils = (function() {\r\n      var objectToCss = function(obj) {\r\n        var css = \"\";\r\n        \r\n        if (typeof obj === \"object\" && obj) {\r\n          css += \"{\";\r\n\r\n          for (var key in obj) {\r\n            if (obj.hasOwnProperty(key) && obj[key]) {\r\n              css += key + \": \" + obj[key] + \";\";\r\n            }\r\n          }\r\n\r\n          css += \"}\";\r\n        }\r\n\r\n        return css;\r\n      };\r\n\r\n      return {\r\n        objectToCss: objectToCss\r\n      };\r\n    })();\r\n\r\n    // retrieve active inspector instance\r\n    var getInspector = function() {\r\n      // check if there is an existing inspector\r\n      // if not create one\r\n      if (!options.inspector) {\r\n        options.inspector = createInspector();\r\n      }\r\n\r\n      // return the inspector\r\n      return options.inspector;\r\n    };\r\n\r\n    // prepare inspector element css styles\r\n    var prepareInspectorStyles = function(top, left, width, height) {\r\n      // prepare inspector element styles\r\n      var _styles = {\r\n        \"transition\": (\"all \" + options.transitionSpeed + \"ms\"),\r\n        \"position\": \"absolute\",\r\n        \"top\": (top || 0) + \"px\",\r\n        \"left\": (left || 0) + \"px\",\r\n        \"width\": (width ||Â 0) + \"px\",\r\n        \"height\": (height || 0) + \"px\",\r\n        \"pointer-events\": \"none\",\r\n        \"z-index\": \"2147483647\",\r\n        \"background-color\": options.bgcolor\r\n      };\r\n\r\n      var styles = utils.objectToCss(_styles);\r\n\r\n      return styles;\r\n    };\r\n\r\n    // inspector element creator\r\n    var createInspector = function() {\r\n      // create a new inspector element\r\n      var inspector = document.createElement(\"div\");\r\n      inspector.id = options.namespace;\r\n\r\n      // get inspector styles as a string\r\n      var inspectorStyles = prepareInspectorStyles();\r\n\r\n      if (typeof options.useInline === \"boolean\" && options.useInline) {\r\n        inspector.style = inspectorStyles.replace(/(\\{|\\})/g, \"\");\r\n      } else {\r\n        // create style element and put styles inside\r\n        var styleEl = document.createElement(\"style\");\r\n        styleEl.type = \"text/css\";\r\n        \r\n        inspectorStyles = (\"#\" + options.namespace + inspectorStyles);\r\n\r\n        // check for IE support\r\n        if (styleEl.styleSheet) {\r\n          styleEl.styleSheet.cssText = inspectorStyles;\r\n        } else {\r\n          styleEl.appendChild(document.createTextNode(inspectorStyles));\r\n        }\r\n\r\n        document.getElementsByTagName(\"head\")[0].appendChild(styleEl);\r\n      }\r\n\r\n      // append inspector element into body\r\n      document.getElementsByTagName(\"body\")[0].appendChild(inspector);\r\n\r\n      // return the created element\r\n      return inspector;\r\n    };\r\n\r\n    // selector query preparation function\r\n    var getSelectorQuery = function() {\r\n      var query = \"*\";\r\n\r\n      // add all exception elements into query\r\n      // it supports all basic css selectors\r\n      if (options.exceptions.length) {\r\n        for (var i = 0; i < options.exceptions.length; i++) {\r\n          query += \":not(\" + options.exceptions[i] + \")\";\r\n        }\r\n      }\r\n\r\n      // return the query\r\n      return query;\r\n    };\r\n\r\n    // apply new options to existing one\r\n    var applyNewOptions = function(opts) {\r\n      // if given parameter is not valid, exit\r\n      if (!opts) return;\r\n\r\n      // change old values with new ones\r\n      for (var opt in opts) {\r\n        if (opts.hasOwnProperty(opt)) {\r\n          options[opt] = opts[opt];\r\n        }\r\n      }\r\n    };\r\n\r\n    // event emitter function\r\n    var eventEmitter = function(event) {\r\n      // get target node\r\n      var target = event.target;\r\n\r\n      // skip itself\r\n      if (target.id === options.namespace) return;\r\n\r\n      switch(event.type) {\r\n        case \"click\":\r\n          eventController(\"onClick\", target);\r\n\r\n          break;\r\n        case \"mouseover\":\r\n          // get target element position information\r\n          var pos = target.getBoundingClientRect();\r\n\r\n          // get scroll top value\r\n          var scrollTop = window.scrollY || document.documentElement.scrollTop; // IE fix\r\n\r\n          var width = pos.width;\r\n          var height = pos.height;\r\n          var top = Math.max(0, pos.top + scrollTop);\r\n          var left = pos.left;\r\n\r\n          // get new inspector styles to be able to drag inspector on target node\r\n          var inspectorStyles = prepareInspectorStyles(top, left, width, height).replace(/(\\{|\\})/g, \"\");\r\n          options.inspector.setAttribute(\"style\", inspectorStyles);\r\n\r\n          // show the element details\r\n          if (typeof options.showInfo === \"boolean\" && options.showInfo) {\r\n            var detailsEl = options.inspector.querySelector(\"#\" + options.namespace + \"-info\");\r\n\r\n            if (detailsEl) {\r\n              detailsEl.querySelector(\"#\" + options.namespace + \"-tag\").innerText = target.tagName;\r\n              detailsEl.querySelector(\"#\" + options.namespace + \"-id\").innerText = (target.id ? (\"#\" + target.id) : \"\");\r\n              detailsEl.querySelector(\"#\" + options.namespace + \"-class\").innerText = (target.className ? (\".\" + target.className.split(/\\s+/).join(\".\")) : \"\");\r\n            }\r\n          }\r\n\r\n          break;\r\n      }\r\n    };\r\n\r\n    // start/stop engine\r\n    var engine = function(type) {\r\n      // check if the given parameter is valid\r\n      if (!type) return;\r\n\r\n      switch(type) {\r\n        case \"start\":\r\n          // bind element click handler\r\n          document.querySelector(\"body\").addEventListener(\"click\", eventEmitter);\r\n\r\n          // if details are activated, append template into inspector element\r\n          if (typeof options.showInfo === \"boolean\" &&\r\n              options.showInfo &&\r\n              typeof options.template === \"string\" &&\r\n              options.template) {\r\n            options.inspector.innerHTML = options.template;\r\n          }\r\n\r\n          break;\r\n        case \"stop\":\r\n          // unbind element click handler\r\n          document.querySelector(\"body\").removeEventListener(\"click\", eventEmitter);\r\n\r\n          break;\r\n      }\r\n\r\n      // get all existing nodes in the page\r\n      var query = getSelectorQuery();\r\n      var allNodes = document.querySelectorAll(query);\r\n\r\n      // bind mouseover event for each node\r\n      for (var i = 0; i < allNodes.length; i++) {\r\n        // event un/binding\r\n        if (type === \"stop\") {\r\n          allNodes[i].removeEventListener(\"mouseover\", eventEmitter);\r\n        } else if (type === \"start\") {\r\n          allNodes[i].addEventListener(\"mouseover\", eventEmitter);\r\n        }\r\n      }\r\n    };\r\n\r\n    // event executor\r\n    var eventController = function(type, element) {\r\n      // even type validation\r\n      if (!options[type] || typeof options[type] !== \"function\") return;\r\n\r\n      // execute the event if it is provided\r\n      switch(type) {\r\n        case \"onStart\":\r\n          options.onStart.call();\r\n\r\n          break;\r\n        case \"onStarting\":\r\n          options.onStarting.call();\r\n\r\n          break;\r\n        case \"onStop\":\r\n          options.onStop.call();\r\n\r\n          break;\r\n        case \"onStopping\":\r\n          options.onStopping.call();\r\n\r\n          break;\r\n        case \"onClick\":\r\n          // pass the clicked element\r\n          options.onClick.call(undefined, element);\r\n\r\n          break;\r\n      }\r\n    };\r\n\r\n    // start to inspect function\r\n    var start = function(opts) {\r\n      // override user options\r\n      applyNewOptions(opts);\r\n\r\n      // run onStarting event\r\n      eventController(\"onStarting\");\r\n\r\n      // get an inspector element instance\r\n      var inspector = getInspector();\r\n\r\n      // start engine\r\n      engine(\"start\");\r\n\r\n      // run onStart event\r\n      eventController(\"onStart\");\r\n    };\r\n\r\n    // stop to inspect function\r\n    var stop = function() {\r\n      // run onStopping event\r\n      eventController(\"onStopping\");\r\n\r\n      // stop engine\r\n      engine(\"stop\");\r\n\r\n      // remove the inspector\r\n      getInspector().remove();\r\n\r\n      options.inspector = null;\r\n\r\n      // run onStop event\r\n      eventController(\"onStop\");\r\n    };\r\n\r\n    return {\r\n      start: start,\r\n      stop: stop\r\n    };\r\n  })(window, document);\r\n})(window, document);\r\n"]}
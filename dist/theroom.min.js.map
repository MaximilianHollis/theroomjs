{"version":3,"sources":["theroom.js"],"names":["window","document","namespace","eventEmitter","event","eventController","target","options","inspector","pos","width","top","left","excludedSelector","excludes","join","Array","prototype","slice","call","querySelectorAll","indexOf","type","getBoundingClientRect","scrollTop","scrollY","documentElement","scrollLeft","scrollX","height","Math","max","style","engine","htmlEl","querySelector","blockRedirection","onbeforeunload","addEventListener","htmlClass","className","status","removeEventListener","replace","undefined","createInspector","arg","arg2","Error","start","opts","this","configure","el","Element","_inspector","createElement","body","appendChild","getInspector","stop","resetInspector","remove","on","name","handler","opt","hasOwnProperty","applyOptions"],"mappings":"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","file":"theroom.min.js","sourcesContent":["(function (window, document, namespace) {\n  var status = 'idle'\n  var options = {\n    inspector: null,\n    htmlClass: true,\n    blockRedirection: false,\n    createInspector: false,\n    excludes: []\n  }\n\n  var getInspector = function () {\n    if (typeof options.inspector === 'string') {\n      // if the provided inspector is a css selector, return the element\n      var el = document.querySelector(options.inspector)\n\n      if (el) return el\n      else throw Error('inspector element not found')\n    }\n\n    // eslint-disable-next-line\n    if (options.inspector instanceof Element) {\n      // if the provided inspector is a dom element, return it\n      return options.inspector\n    }\n\n    if (!options.inspector && options.createInspector) {\n      // create an inspector element\n      var _inspector = document.createElement('div')\n      _inspector.className = 'inspector-element'\n      document.body.appendChild(_inspector)\n      return _inspector\n    }\n\n    throw Error('inspector must be a css selector or a DOM element')\n  }\n\n  var getExclusionSelector = function () {\n    return options.excludes.join(',')\n  }\n\n  var applyOptions = function (opts) {\n    if (typeof opts !== 'object') throw Error('options is expected to be an object')\n\n    for (var opt in opts) {\n      // eslint-disable-next-line\n      if (opts.hasOwnProperty(opt)) {\n        options[opt] = opts[opt]\n      }\n    }\n  }\n\n  var eventEmitter = function (event) {\n    // hook event invocation\n    // do not emit mouseover and click events\n    // if the hook event returns false\n    if (eventController('hook', event) === false) return\n\n    var target = event.target\n\n    // --skip inspector element itself--\n    if (!target || target === options.inspector) return\n\n    // do not inspect excluded elements\n    var excludedSelector = getExclusionSelector()\n    if (excludedSelector) {\n      var excludedElements = Array.prototype.slice.call(document.querySelectorAll(excludedSelector))\n      if (excludedElements.indexOf(target) >= 0) return\n    }\n\n    if (event.type === 'mouseover') {\n      // get target element information\n      var pos = target.getBoundingClientRect()\n      var scrollTop = window.scrollY || document.documentElement.scrollTop\n      var scrollLeft = window.scrollX || document.documentElement.scrollLeft\n      var width = pos.width\n      var height = pos.height\n      var top = Math.max(0, pos.top + scrollTop)\n      var left = Math.max(0, pos.left + scrollLeft)\n\n      options.inspector.style.top = top + 'px'\n      options.inspector.style.left = left + 'px'\n      options.inspector.style.width = width + 'px'\n      options.inspector.style.height = height + 'px'\n    }\n\n    eventController(event.type, target, event)\n  }\n\n  var engine = function (type) {\n    var htmlEl = document.querySelector('html')\n\n    if (type === 'start') {\n      if (options.blockRedirection === true) {\n        // block page redirection\n        window.onbeforeunload = function () {\n          return true\n        }\n      }\n\n      document.addEventListener('click', eventEmitter)\n      document.addEventListener('mouseover', eventEmitter)\n\n      if (options.htmlClass === true) htmlEl.className += ' ' + namespace\n\n      status = 'running'\n    } else if (type === 'stop') {\n      document.removeEventListener('click', eventEmitter)\n      document.removeEventListener('mouseover', eventEmitter)\n\n      if (options.htmlClass === true) htmlEl.className = htmlEl.className.replace(' ' + namespace, '')\n      if (options.blockRedirection === true) window.onbeforeunload = undefined\n\n      status = 'stopped'\n    }\n  }\n\n  var eventController = function (type, arg, arg2) {\n    if (!options[type]) return\n    if (typeof options[type] !== 'function') throw Error('event handler must be a function: ' + type)\n\n    return options[type].call(null, arg, arg2)\n  }\n\n  var start = function (opts) {\n    if (opts) {\n      this.configure(opts)\n    }\n\n    options.inspector = getInspector()\n\n    eventController('starting')\n\n    engine('start')\n\n    eventController('started')\n  }\n\n  var stop = function (resetInspector) {\n    eventController('stopping')\n\n    engine('stop')\n\n    if (resetInspector === true) {\n      options.inspector.style.top = ''\n      options.inspector.style.left = ''\n      options.inspector.style.width = ''\n      options.inspector.style.height = ''\n    }\n\n    if (options.createInspector === true) {\n      // remove auto generated inspector element on stop\n      options.inspector.remove()\n      options.inspector = undefined\n    }\n\n    eventController('stopped')\n  }\n\n  var eventBinder = function (name, handler) {\n    if (typeof name !== 'string') throw Error('event name is expected to be a string but got: ' + typeof name)\n    if (typeof handler !== 'function') throw Error('event handler is not a function for: ' + name)\n\n    options[name] = handler\n  }\n\n  window[namespace] = {\n    start: start,\n    stop: stop,\n    on: eventBinder,\n    configure: function (opts) {\n      applyOptions(opts)\n    },\n    status: function () {\n      return status\n    }\n  }\n})(window, document, 'theRoom')\n"]}
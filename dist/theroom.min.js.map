{"version":3,"sources":["theroom.js"],"names":["window","document","namespace","eventEmitter","event","eventController","target","options","inspector","pos","width","top","left","excludedSelector","excludes","join","Array","prototype","slice","call","querySelectorAll","indexOf","type","getBoundingClientRect","scrollTop","scrollY","documentElement","scrollLeft","scrollX","height","Math","max","style","engine","htmlEl","querySelector","blockRedirection","onbeforeunload","addEventListener","htmlClass","className","status","removeEventListener","replace","undefined","createInspector","arg","arg2","Error","start","opts","this","configure","el","Element","_inspector","createElement","body","appendChild","getInspector","stop","resetInspector","remove","on","name","handler","opt","hasOwnProperty","applyOptions"],"mappings":"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","file":"theroom.min.js","sourcesContent":["(function (window, document, namespace) {\r\n  var status = 'idle'\r\n\r\n  // defaults\r\n  var options = {\r\n    inspector: null,\r\n    htmlClass: true,\r\n    blockRedirection: false,\r\n    createInspector: false,\r\n    excludes: []\r\n  }\r\n\r\n  var getInspector = function () {\r\n    if (typeof options.inspector === 'string') {\r\n      // if the provided inspector is a css selector, return the element\r\n      var el = document.querySelector(options.inspector)\r\n\r\n      if (el) return el\r\n      else throw Error('inspector element not found')\r\n    }\r\n\r\n    // eslint-disable-next-line\r\n    if (options.inspector instanceof Element) {\r\n      // if the provided inspector is a dom element, return it\r\n      return options.inspector\r\n    }\r\n\r\n    if (!options.inspector && options.createInspector) {\r\n      // create an inspector element\r\n      var _inspector = document.createElement('div')\r\n      _inspector.className = 'inspector-element'\r\n      document.body.appendChild(_inspector)\r\n      return _inspector\r\n    }\r\n\r\n    throw Error('inspector must be a css selector or a DOM element')\r\n  }\r\n\r\n  var getExclusionSelector = function () {\r\n    return options.excludes.join(',')\r\n  }\r\n\r\n  var applyOptions = function (opts) {\r\n    if (typeof opts !== 'object') throw Error('options is expected to be an object')\r\n\r\n    // merge\r\n    for (var opt in opts) {\r\n      // eslint-disable-next-line\r\n      if (opts.hasOwnProperty(opt)) {\r\n        options[opt] = opts[opt]\r\n      }\r\n    }\r\n  }\r\n\r\n  var eventEmitter = function (event) {\r\n    // hook event invocation\r\n    // do not emit mouseover and click events\r\n    // if the hook event returns false\r\n    if (eventController('hook', event) === false) return\r\n\r\n    var target = event.target\r\n\r\n    // validation --skip inspector element itself--\r\n    if (!target || target === options.inspector) return\r\n\r\n    // do not inspect excluded elements\r\n    var excludedSelector = getExclusionSelector()\r\n    if (excludedSelector) {\r\n      var excludedElements = Array.prototype.slice.call(document.querySelectorAll(excludedSelector))\r\n      if (excludedElements.indexOf(target) >= 0) return\r\n    }\r\n\r\n    if (event.type === 'mouseover') {\r\n      // get target element information\r\n      var pos = target.getBoundingClientRect()\r\n      var scrollTop = window.scrollY || document.documentElement.scrollTop\r\n      var scrollLeft = window.scrollX || document.documentElement.scrollLeft\r\n      var width = pos.width\r\n      var height = pos.height\r\n      var top = Math.max(0, pos.top + scrollTop)\r\n      var left = Math.max(0, pos.left + scrollLeft)\r\n\r\n      // set inspector element position and dimension\r\n      options.inspector.style.top = top + 'px'\r\n      options.inspector.style.left = left + 'px'\r\n      options.inspector.style.width = width + 'px'\r\n      options.inspector.style.height = height + 'px'\r\n    }\r\n\r\n    // event invocation\r\n    eventController(event.type, target, event)\r\n  }\r\n\r\n  var engine = function (type) {\r\n    var htmlEl = document.querySelector('html')\r\n\r\n    if (type === 'start') {\r\n      if (options.blockRedirection === true) {\r\n        // block page redirection\r\n        window.onbeforeunload = function () {\r\n          return true\r\n        }\r\n      }\r\n\r\n      // bind event listeners\r\n      document.addEventListener('click', eventEmitter)\r\n      document.addEventListener('mouseover', eventEmitter)\r\n\r\n      // add namespace to HTML tag class list\r\n      if (options.htmlClass === true) htmlEl.className += ' ' + namespace\r\n\r\n      status = 'running'\r\n    } else if (type === 'stop') {\r\n      // remove binded event listeners\r\n      document.removeEventListener('click', eventEmitter)\r\n      document.removeEventListener('mouseover', eventEmitter)\r\n\r\n      // remove namespace from HTML tag class list\r\n      if (options.htmlClass === true) htmlEl.className = htmlEl.className.replace(' ' + namespace, '')\r\n\r\n      // remove blocking page redirection\r\n      if (options.blockRedirection === true) window.onbeforeunload = undefined\r\n\r\n      status = 'stopped'\r\n    }\r\n  }\r\n\r\n  var eventController = function (type, arg, arg2) {\r\n    if (!options[type]) return\r\n    if (typeof options[type] !== 'function') throw Error('event handler must be a function: ' + type)\r\n\r\n    // call the event\r\n    return options[type].call(null, arg, arg2)\r\n  }\r\n\r\n  var start = function (opts) {\r\n    if (opts) {\r\n      this.configure(opts)\r\n    }\r\n\r\n    // get the inspector element\r\n    options.inspector = getInspector()\r\n\r\n    eventController('starting')\r\n\r\n    // start the inspection engine\r\n    engine('start')\r\n\r\n    eventController('started')\r\n  }\r\n\r\n  var stop = function (resetInspector) {\r\n    eventController('stopping')\r\n\r\n    // stop the inspection engine\r\n    engine('stop')\r\n\r\n    if (resetInspector === true) {\r\n      options.inspector.style.top = ''\r\n      options.inspector.style.left = ''\r\n      options.inspector.style.width = ''\r\n      options.inspector.style.height = ''\r\n    }\r\n\r\n    if (options.createInspector === true) {\r\n      // remove auto generated inspector element on stop\r\n      options.inspector.remove()\r\n      options.inspector = undefined\r\n    }\r\n\r\n    eventController('stopped')\r\n  }\r\n\r\n  var eventBinder = function (name, handler) {\r\n    if (typeof name !== 'string') throw Error('event name is expected to be a string but got: ' + typeof name)\r\n    if (typeof handler !== 'function') throw Error('event handler is not a function for: ' + name)\r\n\r\n    // update the event\r\n    options[name] = handler\r\n  }\r\n\r\n  // make it accessible from outside\r\n  window[namespace] = {\r\n    start: start,\r\n    stop: stop,\r\n    on: eventBinder,\r\n    configure: function (opts) {\r\n      // merge provided options with defaults\r\n      applyOptions(opts)\r\n    },\r\n    status: function () {\r\n      return status\r\n    }\r\n  }\r\n})(window, document, 'theRoom')\r\n"]}
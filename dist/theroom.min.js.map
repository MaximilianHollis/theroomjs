{"version":3,"sources":["theroom.js"],"names":["window","document","namespace","eventEmitter","event","eventController","target","options","inspector","excludedSelector","excludes","join","Array","prototype","slice","call","querySelectorAll","indexOf","type","pos","getBoundingClientRect","scrollTop","scrollY","documentElement","scrollLeft","scrollX","width","height","top","Math","max","left","style","engine","htmlEl","querySelector","blockRedirection","onbeforeunload","addEventListener","htmlClass","className","status","removeEventListener","replace","undefined","arg","Error","start","opts","opt","hasOwnProperty","applyOptions","el","Element","getInspector","stop","on","name","handler"],"mappings":";;;;;;;CAAA,SAAAA,EAAAC,EAAAC,GA4CA,SAAAC,EAAAC,GAEAC,EAAA,OAAAD,GAGA,IAAAE,EAAAF,EAAAE,OAGA,GAAAA,GAAAA,IAAAC,EAAAC,UAAA,CAGA,IAAAC,EA5BAF,EAAAG,SAAAC,KAAA,KA8BA,KAAA,GADAC,MAAAC,UAAAC,MAAAC,KAAAd,EAAAe,iBAAAP,IACAQ,QAAAX,IAAA,CAEA,GAAA,cAAAF,EAAAc,KAAA,CAEA,IAAAC,EAAAb,EAAAc,wBACAC,EAAArB,EAAAsB,SAAArB,EAAAsB,gBAAAF,UACAG,EAAAxB,EAAAyB,SAAAxB,EAAAsB,gBAAAC,WACAE,EAAAP,EAAAO,MACAC,EAAAR,EAAAQ,OACAC,EAAAC,KAAAC,IAAA,EAAAX,EAAAS,IAAAP,GACAU,EAAAF,KAAAC,IAAA,EAAAX,EAAAY,KAAAP,GAGAjB,EAAAC,UAAAwB,MAAAJ,IAAAA,EAAA,KACArB,EAAAC,UAAAwB,MAAAD,KAAAA,EAAA,KACAxB,EAAAC,UAAAwB,MAAAN,MAAAA,EAAA,KACAnB,EAAAC,UAAAwB,MAAAL,OAAAA,EAAA,KAIAtB,EAAAD,EAAAc,KAAAZ,KAIA,SAAA2B,EAAAf,GAEA,IAAAgB,EAAAjC,EAAAkC,cAAA,QAEA,UAAAjB,IAEA,IAAAX,EAAA6B,mBACApC,EAAAqC,eAAA,WACA,OAAA,IAKApC,EAAAqC,iBAAA,QAAAnC,GACAF,EAAAqC,iBAAA,YAAAnC,IAGA,IAAAI,EAAAgC,YAAAL,EAAAM,WAAA,IAAAtC,GAEAuC,EAAA,WACA,SAAAvB,IAEAjB,EAAAyC,oBAAA,QAAAvC,GACAF,EAAAyC,oBAAA,YAAAvC,IAGA,IAAAI,EAAAgC,YAAAL,EAAAM,UAAAN,EAAAM,UAAAG,QAAA,IAAAzC,EAAA,MAGA,IAAAK,EAAA6B,mBAAApC,EAAAqC,oBAAAO,GAEAH,EAAA,WA/GA,IAAAA,EAAA,OAGAlC,EAAA,CACAC,UAAA,KACA+B,WAAA,EANAH,kBAAA,EACA1B,SAAA,IAoHAL,EAAA,SAAAa,EAAA2B,GAEA,GAAAtC,EAAAW,GAAA,CACA,GAAA,mBAAAX,EAAAW,GAAA,MAAA4B,MAAA,qCAAA5B,GAGA,OAAAA,GACA,IAAA,WACA,IAAA,UACA,IAAA,WACA,IAAA,UACA,IAAA,QACA,IAAA,YACA,IAAA,OAEAX,EAAAW,GAAAH,KAAA,KAAA8B,MA8CA7C,EAAAE,GAAA,CACA6C,MAzCA,SAAAC,IA3GA,SAAAA,GAEA,GAAA,iBAAAA,EAAA,MAAAF,MAAA,uCAGA,IAAA,IAAAG,KAAAD,EACAA,EAAAE,eAAAD,KACA1C,EAAA0C,GAAAD,EAAAC,IAsGAE,CAAAH,GAGAzC,EAAAC,UA1IA,WAEA,GAAA,iBAAAD,EAAAC,UAAA,CAEA,IAAA4C,EAAAnD,EAAAkC,cAAA5B,EAAAC,WAEA,GAAA4C,EAAA,OAAAA,EACA,MAAAN,MAAA,+BAIA,GAAAvC,EAAAC,qBAAA6C,QAEA,OAAAD,EAIA,MAAAN,MAAA,qDAyHAQ,GAGAjD,EAAA,YAGA4B,EAAA,SAGA5B,EAAA,YA4BAkD,KAxBA,WAEAlD,EAAA,YAGA4B,EAAA,QAGA5B,EAAA,YAiBAmD,GAbA,SAAAC,EAAAC,GAEA,GAAA,iBAAAD,EAAA,MAAAX,MAAA,yDAAAW,GACA,GAAA,mBAAAC,EAAA,MAAAZ,MAAA,wCAAAW,GAGAlD,EAAAkD,GAAAC,GAQAjB,OAAA,WACA,OAAAA,IAvLA,CA0LAzC,OAAAC,SAAA","file":"theroom.min.js","sourcesContent":["(function (window, document, namespace) {\r\n  var status = 'idle'\r\n\r\n  // default options\r\n  var options = {\r\n    inspector: null,\r\n    htmlClass: true,\r\n    blockRedirection: false,\r\n    excludes: []\r\n  }\r\n\r\n  // gets the inspector instance\r\n  var getInspector = function () {\r\n    // validation\r\n    if (typeof options.inspector === 'string') {\r\n      // if the provided inspector is a css selector, return the element\r\n      var el = document.querySelector(options.inspector)\r\n\r\n      if (el) return el\r\n      else throw Error('inspector element not found')\r\n    }\r\n\r\n    // validation\r\n    if (options.inspector instanceof Element) {\r\n      // if the provided inspector is a dom element, return it\r\n      return el\r\n    }\r\n\r\n    // validation failed\r\n    throw Error('inspector must be a css selector or a DOM element')\r\n  }\r\n\r\n  // gets the css selector for excluded list\r\n  var getExclusionSelector = function () {\r\n    return options.excludes.join(',')\r\n  }\r\n\r\n  // merge options with defaults\r\n  var applyOptions = function (opts) {\r\n    // validation\r\n    if (typeof opts !== 'object') throw Error('options is expected to be an object')\r\n\r\n    // merge\r\n    for (var opt in opts) {\r\n      if (opts.hasOwnProperty(opt)) {\r\n        options[opt] = opts[opt]\r\n      }\r\n    }\r\n  }\r\n\r\n  // event emitter\r\n  var eventEmitter = function (event) {\r\n    // hook event invocation\r\n    eventController('hook', event)\r\n\r\n    // get target element\r\n    var target = event.target\r\n\r\n    // validation --also skip inspector itself--\r\n    if (!target || target === options.inspector) return\r\n\r\n    // do not inspect excluded elements\r\n    var excludedSelector = getExclusionSelector()\r\n    var excludedElements = Array.prototype.slice.call(document.querySelectorAll(excludedSelector))\r\n    if (excludedElements.indexOf(target) >= 0) return\r\n\r\n    if (event.type === 'mouseover') {\r\n      // get target element information\r\n      var pos = target.getBoundingClientRect()\r\n      var scrollTop = window.scrollY || document.documentElement.scrollTop\r\n      var scrollLeft = window.scrollX || document.documentElement.scrollLeft\r\n      var width = pos.width\r\n      var height = pos.height\r\n      var top = Math.max(0, pos.top + scrollTop)\r\n      var left = Math.max(0, pos.left + scrollLeft)\r\n\r\n      // set inspector element position and dimension\r\n      options.inspector.style.top = top + 'px'\r\n      options.inspector.style.left = left + 'px'\r\n      options.inspector.style.width = width + 'px'\r\n      options.inspector.style.height = height + 'px'\r\n    }\r\n\r\n    // event invocation\r\n    eventController(event.type, target)\r\n  }\r\n\r\n  // inspection engine\r\n  var engine = function (type) {\r\n    // get HTML element\r\n    var htmlEl = document.querySelector('html')\r\n\r\n    if (type === 'start') {\r\n      // block redirection to another page\r\n      if (options.blockRedirection === true) {\r\n        window.onbeforeunload = function () {\r\n          return true\r\n        }\r\n      }\r\n\r\n      // bind event listeners\r\n      document.addEventListener('click', eventEmitter)\r\n      document.addEventListener('mouseover', eventEmitter)\r\n\r\n      // add namespace as class to HTML element\r\n      if (options.htmlClass === true) htmlEl.className += ' ' + namespace\r\n\r\n      status = 'running'\r\n    } else if (type === 'stop') {\r\n      // unbind event listeners\r\n      document.removeEventListener('click', eventEmitter)\r\n      document.removeEventListener('mouseover', eventEmitter)\r\n\r\n      // remove namespace from HTML element class list\r\n      if (options.htmlClass === true) htmlEl.className = htmlEl.className.replace(' ' + namespace, '')\r\n\r\n      // unblock redirection to another page\r\n      if (options.blockRedirection === true) window.onbeforeunload = undefined\r\n\r\n      status = 'stopped'\r\n    }\r\n  }\r\n\r\n  // event executor\r\n  var eventController = function (type, arg) {\r\n    // validations\r\n    if (!options[type]) return\r\n    if (typeof options[type] !== 'function') throw Error('event handler must be a function: ' + type)\r\n\r\n    // call the event\r\n    switch (type) {\r\n      case 'starting':\r\n      case 'started':\r\n      case 'stopping':\r\n      case 'stopped':\r\n      case 'click':\r\n      case 'mouseover':\r\n      case 'hook':\r\n        // pass the argument\r\n        options[type].call(null, arg)\r\n        break\r\n    }\r\n  }\r\n\r\n  // start inspection\r\n  var start = function (opts) {\r\n    // merge provided options with defaults\r\n    applyOptions(opts)\r\n\r\n    // get the inspector element\r\n    options.inspector = getInspector()\r\n\r\n    // starting event\r\n    eventController('starting')\r\n\r\n    // start the inspection engine\r\n    engine('start')\r\n\r\n    // started event\r\n    eventController('started')\r\n  }\r\n\r\n  // stop inspection\r\n  var stop = function () {\r\n    // stopping event\r\n    eventController('stopping')\r\n\r\n    // stop the inspection engine\r\n    engine('stop')\r\n\r\n    // stopped event\r\n    eventController('stopped')\r\n  }\r\n\r\n  // dynamically event binder\r\n  var eventBinder = function (name, handler) {\r\n    // validations\r\n    if (typeof name !== 'string') throw Error('event name is expected to be a string but got: ' + typeof name)\r\n    if (typeof handler !== 'function') throw Error('event handler is not a function for: ' + name)\r\n\r\n    // update options\r\n    options[name] = handler\r\n  }\r\n\r\n  // make it accessible from outside\r\n  window[namespace] = {\r\n    start: start,\r\n    stop: stop,\r\n    on: eventBinder,\r\n    status: function () {\r\n      return status\r\n    }\r\n  }\r\n})(window, document, 'theRoom')\r\n"]}
{"version":3,"sources":["theroom.js"],"names":["window","document","applyOptions","opts","opt","hasOwnProperty","options","eventEmitter","event","eventController","target","inspector","query","excludes","join","Array","prototype","slice","call","querySelectorAll","indexOf","type","pos","getBoundingClientRect","scrollTop","scrollY","documentElement","scrollLeft","scrollX","width","height","top","Math","max","left","style","inspectionEngine","htmlClasses","querySelector","className","blockRedirection","onbeforeunload","addEventListener","htmlClass","namespace","status","removeEventListener","replace","undefined","defaults","arg","start","el","Element","getInspector","stop","on","handler"],"mappings":"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","file":"theroom.min.js","sourcesContent":["(function(window, document) {\n  // defaults\n  var namespace = 'theRoom';\n  var options = {};\n  var defaults = {\n    inspector: null,\n    htmlClass: true,\n    blockRedirection: false,\n    excludes: [\n      'meta',\n      'link',\n      'style',\n      'script'\n    ]\n    /*\n    events:\n      - started\n      - starting\n      - stopped\n      - stopping\n      - click\n      - mouseover\n      - hook\n    */\n  };\n\n  // get the inspector instance\n  var getInspector = function() {\n    // validation\n    if (typeof options.inspector === 'string') {\n      // if the provided inspector is a css selector, return the element\n      var el = document.querySelector(options.inspector);\n      if (el) return el;\n    }\n\n    if (options.inspector instanceof Element) {\n      // if the provided inspector is a dom element, return it\n      return el;\n    }\n\n    // validation failed\n    throw 'inspector not found.\\nit can be a css selector or a DOM element';\n  };\n\n  // get the query to make the elements be inspected\n  var getExclusionSelector = function() {\n    return options.excludes.join(',');\n  };\n\n  // merge options\n  var applyOptions = function(opts) {\n    // validation\n    if (!opts) return;\n    if (typeof opts !== 'object') {\n      throw 'options is expected to be an object';\n    }\n\n    // change old values with new ones\n    for (var opt in opts) {\n      if (opts.hasOwnProperty(opt)) {\n        options[opt] = opts[opt];\n      }\n    }\n  };\n\n  // event emitter\n  var eventEmitter = function(event) {\n    // hook event invocation\n    eventController('hook', event);\n\n    // get target element\n    var target = event.target;\n\n    // validation\n    // skip itself\n    if (!target || target === options.inspector) return;\n\n    // do not inspect excluded elements\n    var query = getExclusionSelector();\n    var excludedElements = Array.prototype.slice.call(document.querySelectorAll(query));\n    if (excludedElements.indexOf(target) >= 0) return;\n\n    if (event.type === 'mouseover') {\n      // get target element information\n      var pos = target.getBoundingClientRect();\n      var scrollTop = window.scrollY || document.documentElement.scrollTop;\n      var scrollLeft = window.scrollX || document.documentElement.scrollLeft;\n      var width = pos.width;\n      var height = pos.height;\n      var top = Math.max(0, pos.top + scrollTop);\n      var left = Math.max(0, pos.left + scrollLeft);\n\n      // set inspector element position and dimension\n      options.inspector.style.top = top + 'px';\n      options.inspector.style.left = left + 'px';\n      options.inspector.style.width = width + 'px';\n      options.inspector.style.height = height + 'px';\n    }\n\n    // event invocation\n    eventController(event.type, target);\n  };\n\n  // inspection engine\n  var inspectionEngine = function(type) {\n    // get HTML element class names\n    var htmlClasses = document.querySelector('html').className;\n\n    if (type === 'start') {\n      // block redirection to another page\n      if (options.blockRedirection === true) {\n        window.onbeforeunload = function() {\n          return true;\n        };\n      }\n\n      // bind event listeners\n      document.addEventListener('click', eventEmitter);\n      document.addEventListener('mouseover', eventEmitter);\n\n      if (options.htmlClass === true) {\n        htmlClasses = htmlClasses + ' ' + namespace;\n      }\n\n      window[namespace].status = 'running';\n    } else if (type === 'stop') {\n      // unbind event listeners\n      document.removeEventListener('click', eventEmitter);\n      document.removeEventListener('mouseover', eventEmitter);\n\n      if (options.htmlClass === true) {\n        htmlClasses = htmlClasses.replace(' ' + namespace, '');\n      }\n\n      // unblock redirection to another page\n      if (options.blockRedirection === true) {\n        window.onbeforeunload = undefined;\n      }\n\n      window[namespace].status = 'stopped';\n    }\n  };\n\n  // event executor\n  var eventController = function(type, arg) {\n    // validation\n    if (!options[type]) return;\n    if (typeof options[type] !== 'function') {\n      throw 'event handler must be a function: ' + type;\n    }\n\n    // call the event\n    switch(type) {\n      case 'started':\n      case 'starting':\n      case 'stopped':\n      case 'stopping':\n      case 'click':\n      case 'mouseover':\n      case 'hook':\n        // pass the argument\n        options[type].call(null, arg);\n        break;\n    }\n  };\n\n  // start inspection\n  var start = function(opts) {\n    // merge provided options with defaults\n    applyOptions(defaults);\n    applyOptions(opts);\n\n    // get the inspector element\n    options.inspector = getInspector();\n\n    // starting event call\n    eventController('starting');\n\n    // start the inspection engine\n    inspectionEngine('start');\n\n    // started event call\n    eventController('started');\n  };\n\n  // stop inspection\n  var stop = function() {\n    // stopping event call\n    eventController('stopping');\n\n    // stop the inspection engine\n    inspectionEngine('stop');\n\n    // stopped event call\n    eventController('stopped');\n\n    // reset options\n    options = {};\n  };\n\n  // dynamically event binder\n  var eventBinder = function(type, handler) {\n    // validation\n    if (!type) {\n      throw 'event name is is not valid';\n    }\n\n    if (typeof type !== 'string') {\n      throw 'event name is expected to be a string but got: ' + typeof type;\n    }\n\n    if (typeof handler !== 'function') {\n      throw 'event handler is not a function for: ' + type;\n    }\n\n    // update options\n    options[type] = handler;\n  };\n\n  // make it accessible from outside\n  window[namespace] = {\n    start: start,\n    stop: stop,\n    on: eventBinder,\n    status: defaults.status\n  };\n})(window, document);\n"]}